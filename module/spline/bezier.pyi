import numpy as np
import numpy.typing as npt

default_updates: list[str]


class bezier:
    degree: int
    dimension: int
    inputs: npt.NDArray[np.float64]
    resolution: int
    updates: list[str]
    curvepoints: list[list[float]]
    distance_LUT: npt.NDArray[np.float64]
    def __init__(self, points: list[list[float]], resolution: int = 1000, updates: list[str] | None = None) -> None: ...
    def accept(self, value: float, start: float = 0, end: float = 1) -> bool: ...
    def update(self, *, points: list[list[float]] | None = None, point: list[float] | None = None, add: list[float] | None = None, remove: bool = False, position: int | None = None) -> dict: ...
    def point(self, t: float) -> list[float]: ...
    def curve(self, resolution: int | None = None, update: bool = False) -> list[list[float]]: ...
    def split(self, t: float) -> tuple[bezier, bezier]: ...
    def lower_degree(self) -> bezier: ...
    def raise_degree(self) -> bezier: ...
    def differentiate(self) -> bezier: ...
    def components(self) -> tuple[bezier, ...]: ...
    def component(self, axis: int) -> bezier: ...
    def bound(self, threshold: float = 1e-5) -> tuple[tuple[float, ...], tuple[float, ...]]: ...
    def generate_distance_LUT(self, resolution: int | None = None, update: bool = True) -> npt.NDArray[np.float64]: ...
    def distance_to_time(self, distance: float) -> float: ...
    def position_to_t(self, position: float, axis: int, threshold: float = 1e-5) -> float: ...


class quadratic_bezier(bezier):
    def __init__(self, points: list[list[float]], resolution: int = 1000, updates: list[str] | None = None) -> None: ...
    def raise_degree(self) -> cubic_bezier: ...
    def components(self) -> tuple[quadratic_bezier, ...]: ...
    def component(self, axis: int) -> quadratic_bezier: ...
    def bound(self, threshold: float | None = None) -> tuple[tuple[float, ...], tuple[float, ...]]: ...
    def position_to_t(self, position: float, axis: int, threshold: float | None = None) -> float: ...


class cubic_bezier(bezier):
    def __init__(self, points: list[list[float]], resolution: int = 1000, updates: list[str] | None = None) -> None: ...
    def lower_degree(self) -> quadratic_bezier: ...
    def raise_degree(self) -> quartic_bezier: ...
    def components(self) -> tuple[cubic_bezier, ...]: ...
    def component(self, axis: int) -> cubic_bezier: ...
    def bound(self, threshold: float | None = None) -> tuple[tuple[float, ...], tuple[float, ...]]: ...
    def position_to_t(self, position: float, axis: int, threshold: float | None = None) -> float: ...


class quartic_bezier(bezier):
    def __init__(self, points: list[list[float]], resolution: int = 1000, updates: list[str] | None = None) -> None: ...
    def lower_degree(self) -> cubic_bezier: ...
    def raise_degree(self) -> quintic_bezier: ...
    def components(self) -> tuple[quartic_bezier, ...]: ...
    def component(self, axis: int) -> quartic_bezier: ...
    def bound(self, threshold: float | None = None) -> tuple[tuple[float, ...], tuple[float, ...]]: ...
    def position_to_t(self, position: float, axis: int, threshold: float | None = None) -> float: ...


class quintic_bezier(bezier):
    def __init__(self, points: list[list[float]], resolution: int = 1000, updates: list[str] | None = None) -> None: ...
    def lower_degree(self) -> quartic_bezier: ...
    def components(self) -> tuple[quintic_bezier, ...]: ...
    def component(self, axis: int) -> quintic_bezier: ...
    def bound(self, threshold: float | None = None) -> tuple[tuple[float, ...], tuple[float, ...]]: ...
